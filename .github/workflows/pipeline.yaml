name: Pipeline
on:
  push:
    branches:
      - 'main'
 
env:
  PIPELINE_EXECUTION_ROLE: arn:aws:iam::380056803005:role/aws-sam-cli-managed-dev-pipe-PipelineExecutionRole-C78QDK8P2WYB
  CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::380056803005:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-182KA1J5PY9B1
  ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-artifactsbucket-hrzliwxeb2ec
  REGION: us-east-1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - name: Assume the pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.REGION}}
          role-to-assume: ${{env.PIPELINE_EXECUTION_ROLE}}
          role-session-name: deploy
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - name: Build backend
        working-directory: backend
        run: sam build
      - name: Deploy backend
        working-directory: backend
        run: |
          echo "PIPELINE_EXECUTION_ROLE = ${{env.PIPELINE_EXECUTION_ROLE}}"
          echo "ARTIFACTS_BUCKET = ${ARTIFACTS_BUCKET}"
          echo "CLOUDFORMATION_EXECUTION_ROLE = ${CLOUDFORMATION_EXECUTION_ROLE}"
          sam deploy --stack-name sam-app \
            --capabilities CAPABILITY_IAM \
            --region ${REGION} \
            --s3-bucket ${ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides \
              "PipelineRole=${PIPELINE_EXECUTION_ROLE}"
      - name: Read frontend bucket name
        run: |
          echo "frontend_bucket_name=$( \
            aws cloudformation describe-stacks \
              --stack-name sam-app \
              --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
              --output text \
          )" >> $GITHUB_ENV          
      - name: Build frontend
        working-directory: frontend
        run: npm install && npm run build
      - name: Clear frontend bucket
        run: |
          echo "frontend_bucket_name: ${{ env.frontend_bucket_name }}"
          aws s3 rm s3://${{ env.frontend_bucket_name }} --recursive
      - name: Deploy frontend
        run: |
          aws s3 cp frontend/build \
            s3://${{ env.frontend_bucket_name }} \
            --recursive
      # Fetch CloudFront Distribution ID with "live" tag
      - name: Fetch CloudFront Distribution ID
        id: get_cf_id
        run: |
          CLOUDFRONT_DISTRIBUTION_ID=$(aws resourcegroupstaggingapi get-resources --region us-east-1 --tag-filters Key=live,Values=yes --resource-type-filters 'cloudfront' --tags-per-page 100 | jq -r ".ResourceTagMappingList[].ResourceARN" | sed 's:.*/::')
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID" >> $GITHUB_ENV
      # CloudFront Cache Invalidation Step
      - name: CloudFront Cache Invalidation
        run: |
          echo "CLOUDFRONT_DISTRIBUTION_ID = ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"